# Constants
G = 9.80665  # acceleration due to gravity (m/s^2)
H = 25       # initial height (m)
V0 = 300     # muzzle's initial velocity (m/s)
ANGLEdeg = 30  # angle in degrees
ANGLErad = ANGLEdeg * pi / 180  # Convert angle to radians

# Vertical and horizontal velocity components
v0_y = V0 * cos(ANGLErad)  # Initial vertical velocity component
v0_x = V0 * sin(ANGLErad)  # Initial horizontal velocity component

# Define time variable
t = var('t')

# Define the vertical position equation: y(t) = -4.90332t^2 + 259.807t + 25
y_t = -4.90332 * t^2 + 259.807 * t + 25

# Solve for time when projectile hits the ground (y(t) = 0)
solutions = solve(y_t == 0, t)

# Convert solutions to numerical values
numeric_solutions = [sol.rhs().n() for sol in solutions]  # .rhs gets the right hand side(solutions) of equation

# Get positive solution (time cannot be negative)
positive_solutions = [sol for sol in numeric_solutions if sol > 0]

# Ensure that there is at least one positive solution
if positive_solutions:
    time_of_flight = max(positive_solutions)
    
    # Horizontal velocity (constant)
    horizontal_velocity = v0_x

    # Calculate the range (horizontal velocity * time of flight)
    range_of_projectile = horizontal_velocity * time_of_flight

    # Round the result to the nearest hundred meters
    range_of_projectile_rounded = round(range_of_projectile, -2)

    # Output the results
    print(f"Time of flight: {time_of_flight} seconds")
    print(f"Range of projectile: {range_of_projectile_rounded} meters")
else:
    print("No positive time solution found.")
