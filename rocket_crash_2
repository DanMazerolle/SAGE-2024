#constants
t_init = 11 # time of flight before malfunction.
m_init = 107000 # mass of the rocket at launch, in kilograms.
n_init = 1270000 # force of the upward thrust of the rocket before the malfunction, 1.27 meganewtons => 127000 newtons.
g = 9.80665 # constant of gravity, m/s^2
y_init = 0 # initial height of the rocket
t = var('t')


a_init = 1270000 / 107000 # Calculate the inital acceleration of the rocket, in m/s^2. = 1.18691588785047
a_init = a_init.n() # convert to numeric value

a_launch = (1270000 - (m_init * g)) / m_init #count for gravity to get our total launch acceleration
print("The acceleration of the rocket before the malfunction was: ", str(a_launch), "m/s^2.")

vf_launch = a_launch * 11 # get the final velocity of the rocket before the malfunction occurs
print("The finalvelocity of the rocket before the malfunction was: ", str(vf_launch),"m/s.")


posY_premalfunc = 1/2 * (a_launch) * 11**2
print("The highest the rocket got before the malfunction was: ", str(posY_premalfunc), "m off the ground.")


# Post-Malfunction Functions
f_t = 1270000 * ( e**((t - t_init) / 2))  # Thrust after malfunction
print(f_t)
a_post = (f_t - (m_init * g)) / m_init  # Acceleration after malfunction
#a_post = f_t / m_init - g  # Acceleration after malfunction
print("a post")
print(a_post)
v_post = integral(a_post, t) + vf_launch  # Velocity function after malfunction


# Ensure continuity at t_init for the position function
y_post_temp = v_post# Temporary position function
#y_post_temp = integral(v_post, t)  # Temporary position function
print(y_post_temp)
print("bingus")
C = posY_premalfunc - y_post_temp.substitute(t=t_init)  # Solve for integration constant
y_post = y_post_temp - C  # Final position function after malfunction
#y_post = y_post_temp + C  # Final position function after malfunction
print(y_post)

# Time of Impact
t_impact = find_root(y_post, t_init, 100)  # Solve y_post = 0 for t_impact
print(f"The time of impact is approximately: {t_impact} seconds.")

#Plot Altitude
altitude_pre = plot(0.5 * a_launch * t^2, (t, 0, t_init), color='blue', legend_label='Pre-Malfunction')
altitude_post = plot(-y_post - posY_premalfunc + 2, (t, t_init, t_impact), color='red', legend_label='Post-Malfunction', plot_points=500)

altitude_plot = altitude_pre + altitude_post
altitude_plot.axes_labels(['Time (s)', 'Altitude (m)'])
altitude_plot.show(title="Rocket Altitude from Launch to Impact")

#Plot velocity
velocity_pre = plot(a_launch * t, (t, 0 , t_init), color='blue', legend_label='Pre-Malfunction')
velocity_post = plot(-integral(a_post, t) - 2.7*vf_launch, (t, t_init, t_impact), color='red', legend_label='Post-Malfunction', plot_points=2)

velocity_plot = velocity_pre + velocity_post
velocity_plot.axes_labels(['Time (s)', 'Velocity (m/s)'])
velocity_plot.show(title="Rocket velocity from Launch to Impact")
